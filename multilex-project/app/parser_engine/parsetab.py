
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programASSIGN COMMA CONST DIVIDE FUNCTION IDENTIFIER LET LPAREN MINUS NUMBER PLUS RETURN RPAREN SEMICOLON TIMES VARprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : var_decl\n                 | assignment\n                 | return_stmtvar_decl : VAR var_list optional_semicolon\n                | LET var_list optional_semicolon\n                | CONST var_list optional_semicolonvar_list : var_list COMMA var_itemvar_list : var_itemvar_item : IDENTIFIER ASSIGN expressionvar_item : IDENTIFIERassignment : IDENTIFIER ASSIGN expression optional_semicolonreturn_stmt : RETURN expression optional_semicolonexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : NUMBERexpression : IDENTIFIERoptional_semicolon : SEMICOLON\n                          | emptyempty :'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,12,13,14,15,16,17,19,20,21,22,24,25,27,28,29,30,35,36,37,38,39,40,41,],[7,7,-3,-4,-5,-6,-2,-24,-11,-13,-24,-24,-24,-20,-21,-7,-22,-23,-8,-9,-24,-15,-10,-12,-14,-16,-17,-18,-19,]),'LET':([0,2,3,4,5,6,12,13,14,15,16,17,19,20,21,22,24,25,27,28,29,30,35,36,37,38,39,40,41,],[8,8,-3,-4,-5,-6,-2,-24,-11,-13,-24,-24,-24,-20,-21,-7,-22,-23,-8,-9,-24,-15,-10,-12,-14,-16,-17,-18,-19,]),'CONST':([0,2,3,4,5,6,12,13,14,15,16,17,19,20,21,22,24,25,27,28,29,30,35,36,37,38,39,40,41,],[9,9,-3,-4,-5,-6,-2,-24,-11,-13,-24,-24,-24,-20,-21,-7,-22,-23,-8,-9,-24,-15,-10,-12,-14,-16,-17,-18,-19,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[10,10,-3,-4,-5,-6,15,15,15,21,-2,-24,-11,-13,-24,-24,21,-24,-20,-21,-7,15,-22,-23,21,-8,-9,-24,-15,21,21,21,21,-10,-12,-14,-16,-17,-18,-19,]),'RETURN':([0,2,3,4,5,6,12,13,14,15,16,17,19,20,21,22,24,25,27,28,29,30,35,36,37,38,39,40,41,],[11,11,-3,-4,-5,-6,-2,-24,-11,-13,-24,-24,-24,-20,-21,-7,-22,-23,-8,-9,-24,-15,-10,-12,-14,-16,-17,-18,-19,]),'$end':([1,2,3,4,5,6,12,13,14,15,16,17,19,20,21,22,24,25,27,28,29,30,35,36,37,38,39,40,41,],[0,-1,-3,-4,-5,-6,-2,-24,-11,-13,-24,-24,-24,-20,-21,-7,-22,-23,-8,-9,-24,-15,-10,-12,-14,-16,-17,-18,-19,]),'ASSIGN':([10,15,],[18,26,]),'NUMBER':([11,18,26,31,32,33,34,],[20,20,20,20,20,20,20,]),'COMMA':([13,14,15,16,17,20,21,35,36,38,39,40,41,],[23,-11,-13,23,23,-20,-21,-10,-12,-16,-17,-18,-19,]),'SEMICOLON':([13,14,15,16,17,19,20,21,29,35,36,38,39,40,41,],[24,-11,-13,24,24,24,-20,-21,24,-10,-12,-16,-17,-18,-19,]),'PLUS':([19,20,21,29,36,38,39,40,41,],[31,-20,-21,31,31,31,31,31,31,]),'MINUS':([19,20,21,29,36,38,39,40,41,],[32,-20,-21,32,32,32,32,32,32,]),'TIMES':([19,20,21,29,36,38,39,40,41,],[33,-20,-21,33,33,33,33,33,33,]),'DIVIDE':([19,20,21,29,36,38,39,40,41,],[34,-20,-21,34,34,34,34,34,34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,12,]),'var_decl':([0,2,],[4,4,]),'assignment':([0,2,],[5,5,]),'return_stmt':([0,2,],[6,6,]),'var_list':([7,8,9,],[13,16,17,]),'var_item':([7,8,9,23,],[14,14,14,35,]),'expression':([11,18,26,31,32,33,34,],[19,29,36,38,39,40,41,]),'optional_semicolon':([13,16,17,19,29,],[22,27,28,30,37,]),'empty':([13,16,17,19,29,],[25,25,25,25,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','js_parser.py',8),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','js_parser.py',14),
  ('statement_list -> statement','statement_list',1,'p_statement_list','js_parser.py',15),
  ('statement -> var_decl','statement',1,'p_statement','js_parser.py',23),
  ('statement -> assignment','statement',1,'p_statement','js_parser.py',24),
  ('statement -> return_stmt','statement',1,'p_statement','js_parser.py',25),
  ('var_decl -> VAR var_list optional_semicolon','var_decl',3,'p_var_decl','js_parser.py',30),
  ('var_decl -> LET var_list optional_semicolon','var_decl',3,'p_var_decl','js_parser.py',31),
  ('var_decl -> CONST var_list optional_semicolon','var_decl',3,'p_var_decl','js_parser.py',32),
  ('var_list -> var_list COMMA var_item','var_list',3,'p_var_list_multiple','js_parser.py',36),
  ('var_list -> var_item','var_list',1,'p_var_list_single','js_parser.py',40),
  ('var_item -> IDENTIFIER ASSIGN expression','var_item',3,'p_var_item_assign','js_parser.py',44),
  ('var_item -> IDENTIFIER','var_item',1,'p_var_item_noassign','js_parser.py',48),
  ('assignment -> IDENTIFIER ASSIGN expression optional_semicolon','assignment',4,'p_assignment','js_parser.py',54),
  ('return_stmt -> RETURN expression optional_semicolon','return_stmt',3,'p_return_stmt','js_parser.py',59),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','js_parser.py',64),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','js_parser.py',65),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','js_parser.py',66),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','js_parser.py',67),
  ('expression -> NUMBER','expression',1,'p_expression_number','js_parser.py',71),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','js_parser.py',75),
  ('optional_semicolon -> SEMICOLON','optional_semicolon',1,'p_optional_semicolon','js_parser.py',80),
  ('optional_semicolon -> empty','optional_semicolon',1,'p_optional_semicolon','js_parser.py',81),
  ('empty -> <empty>','empty',0,'p_empty','js_parser.py',85),
]
